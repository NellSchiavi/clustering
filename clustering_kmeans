import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
import time
from sklearn.metrics import silhouette_score, davies_bouldin_score, calinski_harabasz_score

#gera um valor aleatorio para geração sem subescrever a imagem
timestamp = int(time.time())

# Gera dados de exemplo
X, y_true = make_blobs(n_samples=300, centers=4, cluster_std=0.60, random_state=0) #mudar para 5 na apresentação

# gráfico - dados originais
plt.scatter(X[:, 0], X[:, 1], s=50)
plt.title('Dados Originais')
plt.savefig(f"dados_originais_{timestamp}.png")  # Salva o gráfico como imagem

# K-Means
kmeans = KMeans(n_clusters=4)
kmeans.fit(X)
y_kmeans = kmeans.predict(X)

# gráfico - clusters encontrados
plt.figure()
plt.scatter(X[:, 0], X[:, 1], c=y_kmeans, s=50, cmap='viridis')

centers = kmeans.cluster_centers_
plt.scatter(centers[:, 0], centers[:, 1], c='red', s=200, alpha=0.75, marker='X')
plt.title('Clusters Encontrados pelo K-Means')
plt.savefig(f"clusters_encontrados_{timestamp}.png")  # Salva o gráfico como imagem


#print das informações relevantes do clustering
print("Inertia:", kmeans.inertia_)
print("Silhouette Score:", silhouette_score(X, y_kmeans))
print("Davies-Bouldin Index:", davies_bouldin_score(X, y_kmeans))
print("Calinski-Harabasz Index:", calinski_harabasz_score(X, y_kmeans))
